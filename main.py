import discord
from discord.ext import commands
from discord.ui import View, Modal, TextInput, Button
import psycopg2
import os
from datetime import datetime
from keep_alive import keep_alive  # –¥–ª—è UptimeRobot

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

DATABASE_URL = os.getenv("DATABASE_URL")
conn = psycopg2.connect(DATABASE_URL)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_data (
        user_id TEXT PRIMARY KEY,
        –Ω–∞—á–∞–ª—å–Ω—ã–π_–±–∞–ª–∞–Ω—Å INTEGER DEFAULT 0
    );
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ_—Å–¥–µ–ª–∫–∏ (
        id SERIAL PRIMARY KEY,
        user_id TEXT,
        —Ç–æ–≤–∞—Ä TEXT,
        —Ü–µ–Ω–∞_–ø–æ–∫—É–ø–∫–∏ REAL,
        –¥–∞—Ç–∞ TEXT
    );
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS –¥–æ—Ö–æ–¥—ã (
        id SERIAL PRIMARY KEY,
        user_id TEXT,
        —Å—É–º–º–∞ INTEGER,
        –æ–ø–∏—Å–∞–Ω–∏–µ TEXT,
        –¥–∞—Ç–∞ TEXT
    );
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS —Ä–∞—Å—Ö–æ–¥—ã (
        id SERIAL PRIMARY KEY,
        user_id TEXT,
        —Å—É–º–º–∞ INTEGER,
        –æ–ø–∏—Å–∞–Ω–∏–µ TEXT,
        –¥–∞—Ç–∞ TEXT
    );
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS –∞—Ä–µ–Ω–¥–∞ (
        id SERIAL PRIMARY KEY,
        user_id TEXT,
        –º–∞—à–∏–Ω–∞ TEXT,
        —á–∞—Å—ã REAL,
        –ø—Ä–∏–±—ã–ª—å REAL,
        –¥–∞—Ç–∞ TEXT
    );
''')
conn.commit()

def ensure_user_exists(user_id):
    cursor.execute("SELECT user_id FROM user_data WHERE user_id = %s", (str(user_id),))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO user_data (user_id) VALUES (%s)", (str(user_id),))
        conn.commit()

def set_–Ω–∞—á–∞–ª—å–Ω—ã–π_–±–∞–ª–∞–Ω—Å(user_id, value):
    ensure_user_exists(user_id)
    cursor.execute("UPDATE user_data SET –Ω–∞—á–∞–ª—å–Ω—ã–π_–±–∞–ª–∞–Ω—Å = %s WHERE user_id = %s", (value, str(user_id)))
    conn.commit()

# –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
class –î–æ—Ö–æ–¥Modal(Modal):
    def __init__(self, user_id):
        super().__init__(title="–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
        self.user_id = user_id
        self.amount = TextInput(label="–°—É–º–º–∞", required=True)
        self.description = TextInput(label="–û–ø–∏—Å–∞–Ω–∏–µ", required=True)
        self.add_item(self.amount)
        self.add_item(self.description)

    async def on_submit(self, interaction):
        –¥–∞—Ç–∞ = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO –¥–æ—Ö–æ–¥—ã (user_id, —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞) VALUES (%s, %s, %s, %s)",
                       (str(self.user_id), int(self.amount.value), self.description.value, –¥–∞—Ç–∞))
        conn.commit()
        await interaction.response.send_message("‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!", ephemeral=True)

class –†–∞—Å—Ö–æ–¥Modal(Modal):
    def __init__(self, user_id):
        super().__init__(title="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
        self.user_id = user_id
        self.amount = TextInput(label="–°—É–º–º–∞", required=True)
        self.description = TextInput(label="–û–ø–∏—Å–∞–Ω–∏–µ", required=True)
        self.add_item(self.amount)
        self.add_item(self.description)

    async def on_submit(self, interaction):
        –¥–∞—Ç–∞ = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO —Ä–∞—Å—Ö–æ–¥—ã (user_id, —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞) VALUES (%s, %s, %s, %s)",
                       (str(self.user_id), int(self.amount.value), self.description.value, –¥–∞—Ç–∞))
        conn.commit()
        await interaction.response.send_message("üßæ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!", ephemeral=True)

class –ê—Ä–µ–Ω–¥–∞Modal(Modal):
    def __init__(self, user_id):
        super().__init__(title="–£—á–µ—Å—Ç—å –∞—Ä–µ–Ω–¥—É")
        self.user_id = user_id
        self.–º–∞—à–∏–Ω–∞ = TextInput(label="–ú–∞—à–∏–Ω–∞", required=True)
        self.—á–∞—Å—ã = TextInput(label="–ß–∞—Å—ã –∞—Ä–µ–Ω–¥—ã", required=True, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5")
        self.—Å—Ç–∞–≤–∫–∞ = TextInput(label="–¶–µ–Ω–∞ –∑–∞ —á–∞—Å –∞—Ä–µ–Ω–¥—ã", required=True, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 300")
        self.add_item(self.–º–∞—à–∏–Ω–∞)
        self.add_item(self.—á–∞—Å—ã)
        self.add_item(self.—Å—Ç–∞–≤–∫–∞)

    async def on_submit(self, interaction):
        –¥–∞—Ç–∞ = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        —á–∞—Å—ã = float(self.—á–∞—Å—ã.value)
        —Å—Ç–∞–≤–∫–∞ = float(self.—Å—Ç–∞–≤–∫–∞.value)
        –ø—Ä–∏–±—ã–ª—å = —á–∞—Å—ã * —Å—Ç–∞–≤–∫–∞

        cursor.execute("INSERT INTO –∞—Ä–µ–Ω–¥–∞ (user_id, –º–∞—à–∏–Ω–∞, —á–∞—Å—ã, –ø—Ä–∏–±—ã–ª—å, –¥–∞—Ç–∞) VALUES (%s, %s, %s, %s, %s)",
                       (str(self.user_id), self.–º–∞—à–∏–Ω–∞.value, —á–∞—Å—ã, –ø—Ä–∏–±—ã–ª—å, –¥–∞—Ç–∞))
        conn.commit()
        await interaction.response.send_message(f"üöó –ê—Ä–µ–Ω–¥–∞ —É—á—Ç–µ–Ω–∞! –ü—Ä–∏–±—ã–ª—å: {–ø—Ä–∏–±—ã–ª—å}‚ÇΩ", ephemeral=True)

# –û—á–∏—Å—Ç–∫–∞
class –û—á–∏—Å—Ç–∫–∞View(View):
    def __init__(self, user_id):
        super().__init__()
        self.user_id = str(user_id)

    @discord.ui.button(label="–î–æ—Ö–æ–¥—ã", style=discord.ButtonStyle.danger)
    async def –¥–æ—Ö–æ–¥—ã(self, interaction, _):
        cursor.execute("DELETE FROM –¥–æ—Ö–æ–¥—ã WHERE user_id = %s", (self.user_id,))
        conn.commit()
        await interaction.response.send_message("‚úÖ –î–æ—Ö–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã", ephemeral=True)

    @discord.ui.button(label="–†–∞—Å—Ö–æ–¥—ã", style=discord.ButtonStyle.danger)
    async def —Ä–∞—Å—Ö–æ–¥—ã(self, interaction, _):
        cursor.execute("DELETE FROM —Ä–∞—Å—Ö–æ–¥—ã WHERE user_id = %s", (self.user_id,))
        conn.commit()
        await interaction.response.send_message("‚úÖ –†–∞—Å—Ö–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã", ephemeral=True)

    @discord.ui.button(label="–ê—Ä–µ–Ω–¥–∞", style=discord.ButtonStyle.danger)
    async def –∞—Ä–µ–Ω–¥–∞(self, interaction, _):
        cursor.execute("DELETE FROM –∞—Ä–µ–Ω–¥–∞ WHERE user_id = %s", (self.user_id,))
        conn.commit()
        await interaction.response.send_message("‚úÖ –ê—Ä–µ–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞", ephemeral=True)

    @discord.ui.button(label="–í—Å—ë", style=discord.ButtonStyle.danger)
    async def –≤—Å—ë(self, interaction, _):
        cursor.execute("DELETE FROM –¥–æ—Ö–æ–¥—ã WHERE user_id = %s", (self.user_id,))
        cursor.execute("DELETE FROM —Ä–∞—Å—Ö–æ–¥—ã WHERE user_id = %s", (self.user_id,))
        cursor.execute("DELETE FROM –∞—Ä–µ–Ω–¥–∞ WHERE user_id = %s", (self.user_id,))
        cursor.execute("UPDATE user_data SET –Ω–∞—á–∞–ª—å–Ω—ã–π_–±–∞–ª–∞–Ω—Å = 0 WHERE user_id = %s", (self.user_id,))
        conn.commit()
        await interaction.response.send_message("üßπ –í—Å—ë –æ—á–∏—â–µ–Ω–æ!", ephemeral=True)

# –ü—Ä–æ—Å–º–æ—Ç—Ä
class –ë–∞–ª–∞–Ω—ÅView(View):
    def __init__(self, user_id):
        super().__init__()
        self.user_id = str(user_id)

    async def –ø–æ–∫–∞–∑–∞—Ç—å_–±–∞–ª–∞–Ω—Å(self, interaction, _):
        cursor.execute("SELECT –Ω–∞—á–∞–ª—å–Ω—ã–π_–±–∞–ª–∞–Ω—Å FROM user_data WHERE user_id = %s", (self.user_id,))
        –Ω–∞—á–∞–ª—å–Ω—ã–π = cursor.fetchone()
        –Ω–∞—á–∞–ª—å–Ω—ã–π = –Ω–∞—á–∞–ª—å–Ω—ã–π[0] if –Ω–∞—á–∞–ª—å–Ω—ã–π else 0
        cursor.execute("SELECT COALESCE(SUM(—Å—É–º–º–∞),0) FROM –¥–æ—Ö–æ–¥—ã WHERE user_id = %s", (self.user_id,))
        –¥–æ—Ö–æ–¥ = cursor.fetchone()[0]
        cursor.execute("SELECT COALESCE(SUM(—Å—É–º–º–∞),0) FROM —Ä–∞—Å—Ö–æ–¥—ã WHERE user_id = %s", (self.user_id,))
        —Ä–∞—Å—Ö–æ–¥ = cursor.fetchone()[0]
        cursor.execute("SELECT COALESCE(SUM(–ø—Ä–∏–±—ã–ª—å),0) FROM –∞—Ä–µ–Ω–¥–∞ WHERE user_id = %s", (self.user_id,))
        –∞—Ä–µ–Ω–¥–∞ = cursor.fetchone()[0]
        –∏—Ç–æ–≥ = –Ω–∞—á–∞–ª—å–Ω—ã–π + –¥–æ—Ö–æ–¥ + –∞—Ä–µ–Ω–¥–∞ - —Ä–∞—Å—Ö–æ–¥
        await interaction.response.send_message(f"üí∞ –ë–∞–ª–∞–Ω—Å: {–∏—Ç–æ–≥}‚ÇΩ\n–ù–∞—á–∞–ª—å–Ω—ã–π: {–Ω–∞—á–∞–ª—å–Ω—ã–π}‚ÇΩ\n–î–æ—Ö–æ–¥—ã: {–¥–æ—Ö–æ–¥}‚ÇΩ\n–ê—Ä–µ–Ω–¥–∞: {–∞—Ä–µ–Ω–¥–∞}‚ÇΩ\n–†–∞—Å—Ö–æ–¥—ã: {—Ä–∞—Å—Ö–æ–¥}‚ÇΩ", ephemeral=True)

    async def —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–±–∞–ª–∞–Ω—Å(self, interaction, _):
        class StartModal(Modal):
            def __init__(inner):
                super().__init__(title="–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
                inner.amount = TextInput(label="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", required=True)
                inner.add_item(inner.amount)

            async def on_submit(inner, interaction):
                set_–Ω–∞—á–∞–ª—å–Ω—ã–π_–±–∞–ª–∞–Ω—Å(self.user_id, int(inner.amount.value))
                await interaction.response.send_message("üéØ –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", ephemeral=True)

        await interaction.response.send_modal(StartModal())

    async def –∏—Å—Ç–æ—Ä–∏—è_–æ–ø–µ—Ä–∞—Ü–∏–π(self, interaction, _):
        msg = "üìí –ò—Å—Ç–æ—Ä–∏—è:\n"
        cursor.execute("SELECT —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞ FROM –¥–æ—Ö–æ–¥—ã WHERE user_id = %s ORDER BY –¥–∞—Ç–∞ DESC LIMIT 5", (self.user_id,))
        –¥–æ—Ö–æ–¥—ã = cursor.fetchall()
        msg += "\nüü¢ –î–æ—Ö–æ–¥—ã:\n" + "\n".join([f"+{—Å}‚ÇΩ | {–æ} ({–¥})" for —Å, –æ, –¥ in –¥–æ—Ö–æ–¥—ã]) if –¥–æ—Ö–æ–¥—ã else "\n–ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤"
        cursor.execute("SELECT —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞ FROM —Ä–∞—Å—Ö–æ–¥—ã WHERE user_id = %s ORDER BY –¥–∞—Ç–∞ DESC LIMIT 5", (self.user_id,))
        —Ä–∞—Å—Ö–æ–¥—ã = cursor.fetchall()
        msg += "\n\nüî¥ –†–∞—Å—Ö–æ–¥—ã:\n" + "\n".join([f"-{—Å}‚ÇΩ | {–æ} ({–¥})" for —Å, –æ, –¥ in —Ä–∞—Å—Ö–æ–¥—ã]) if —Ä–∞—Å—Ö–æ–¥—ã else "\n–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"
        cursor.execute("SELECT –º–∞—à–∏–Ω–∞, —á–∞—Å—ã, –ø—Ä–∏–±—ã–ª—å, –¥–∞—Ç–∞ FROM –∞—Ä–µ–Ω–¥–∞ WHERE user_id = %s ORDER BY –¥–∞—Ç–∞ DESC LIMIT 5", (self.user_id,))
        –∞—Ä–µ–Ω–¥—ã = cursor.fetchall()
        msg += "\n\nüöó –ê—Ä–µ–Ω–¥–∞:\n" + "\n".join([f"{–º}: {—á}—á ‚Üí {–ø}‚ÇΩ ({–¥})" for –º, —á, –ø, –¥ in –∞—Ä–µ–Ω–¥—ã]) if –∞—Ä–µ–Ω–¥—ã else "\n–ù–µ—Ç –∞—Ä–µ–Ω–¥—ã"
        await interaction.response.send_message(msg, ephemeral=True)
        
class –ü–æ–∫—É–ø–∫–∞Modal(Modal):
    def __init__(self, user_id):
        super().__init__(title="–§–∏–∫—Å–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏")
        self.user_id = str(user_id)
        self.—Ç–æ–≤–∞—Ä = TextInput(label="–ß—Ç–æ –∫—É–ø–∏–ª–∏?", required=True)
        self.–ø–æ–∫—É–ø–∫–∞ = TextInput(label="–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏", required=True, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1200")
        self.add_item(self.—Ç–æ–≤–∞—Ä)
        self.add_item(self.–ø–æ–∫—É–ø–∫–∞)

    async def on_submit(self, interaction):
        –¥–∞—Ç–∞ = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        —Ç–æ–≤–∞—Ä = self.—Ç–æ–≤–∞—Ä.value
        –ø–æ–∫—É–ø–∫–∞ = float(self.–ø–æ–∫—É–ø–∫–∞.value)

        cursor.execute(
            "INSERT INTO –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ_—Å–¥–µ–ª–∫–∏ (user_id, —Ç–æ–≤–∞—Ä, —Ü–µ–Ω–∞_–ø–æ–∫—É–ø–∫–∏, –¥–∞—Ç–∞) VALUES (%s, %s, %s, %s)",
            (self.user_id, —Ç–æ–≤–∞—Ä, –ø–æ–∫—É–ø–∫–∞, –¥–∞—Ç–∞)
        )
        conn.commit()

        await interaction.response.send_message(f"üìù –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {—Ç–æ–≤–∞—Ä} –∫—É–ø–ª–µ–Ω –∑–∞ {–ø–æ–∫—É–ø–∫–∞}‚ÇΩ", ephemeral=True)
        
class –ó–∞–≤–µ—Ä—à–∏—Ç—å–°–¥–µ–ª–∫—ÉModal(Modal):
    def __init__(self, user_id, —Å–¥–µ–ª–∫–∞_id, —Ç–æ–≤–∞—Ä, –ø–æ–∫—É–ø–∫–∞):
        super().__init__(title="–ü—Ä–æ–¥–∞–∂–∞ –ø–µ—Ä–µ–∫—É–ø–∞")
        self.user_id = str(user_id)
        self.—Å–¥–µ–ª–∫–∞_id = —Å–¥–µ–ª–∫–∞_id
        self.—Ç–æ–≤–∞—Ä = —Ç–æ–≤–∞—Ä
        self.–ø–æ–∫—É–ø–∫–∞ = –ø–æ–∫—É–ø–∫–∞

        self.–ø—Ä–æ–¥–∞–∂–∞ = TextInput(label="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", required=True, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1500")
        self.add_item(self.–ø—Ä–æ–¥–∞–∂–∞)

    async def on_submit(self, interaction):
        –ø—Ä–æ–¥–∞–∂–∞ = float(self.–ø—Ä–æ–¥–∞–∂–∞.value)
        –ø—Ä–∏–±—ã–ª—å = –ø—Ä–æ–¥–∞–∂–∞ - self.–ø–æ–∫—É–ø–∫–∞
        –¥–∞—Ç–∞ = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        if –ø—Ä–∏–±—ã–ª—å >= 0:
            cursor.execute(
                "INSERT INTO –¥–æ—Ö–æ–¥—ã (user_id, —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞) VALUES (%s, %s, %s, %s)",
                (self.user_id, –ø—Ä–∏–±—ã–ª—å, f"üîÑ –ü–µ—Ä–µ–∫—É–ø (–ø—Ä–æ–¥–∞–∂–∞): {self.—Ç–æ–≤–∞—Ä}", –¥–∞—Ç–∞)
            )
            msg = f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ: {self.—Ç–æ–≤–∞—Ä} ‚Üí –ø—Ä–∏–±—ã–ª—å {–ø—Ä–∏–±—ã–ª—å}‚ÇΩ"
        else:
            cursor.execute(
                "INSERT INTO —Ä–∞—Å—Ö–æ–¥—ã (user_id, —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞) VALUES (%s, %s, %s, %s)",
                (self.user_id, abs(–ø—Ä–∏–±—ã–ª—å), f"üîÑ –£–±—ã—Ç–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∫—É–ø–µ: {self.—Ç–æ–≤–∞—Ä}", –¥–∞—Ç–∞)
            )
            msg = f"üìâ –ü—Ä–æ–¥–∞–Ω–æ: {self.—Ç–æ–≤–∞—Ä} ‚Üí —É–±—ã—Ç–æ–∫ {abs(–ø—Ä–∏–±—ã–ª—å)}‚ÇΩ"

        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Å–¥–µ–ª–∫—É
        cursor.execute("DELETE FROM –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ_—Å–¥–µ–ª–∫–∏ WHERE id = %s", (self.—Å–¥–µ–ª–∫–∞_id,))
        conn.commit()

        await interaction.response.send_message(msg, ephemeral=True)        
        
class –ü–µ—Ä–µ–∫—É–øModal(Modal):
    def __init__(self, user_id):
        super().__init__(title="–£—á—ë—Ç –ø–µ—Ä–µ–∫—É–ø–∞")
        self.user_id = str(user_id)
        self.—Ç–æ–≤–∞—Ä = TextInput(label="–ß—Ç–æ –ø–µ—Ä–µ–∫—É–ø–∏–ª–∏?", required=True)
        self.–ø–æ–∫—É–ø–∫–∞ = TextInput(label="–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏", required=True, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1000")
        self.–ø—Ä–æ–¥–∞–∂–∞ = TextInput(label="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", required=True, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1500")
        self.add_item(self.—Ç–æ–≤–∞—Ä)
        self.add_item(self.–ø–æ–∫—É–ø–∫–∞)
        self.add_item(self.–ø—Ä–æ–¥–∞–∂–∞)

    async def on_submit(self, interaction):
        –¥–∞—Ç–∞ = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        –ø–æ–∫—É–ø–∫–∞ = float(self.–ø–æ–∫—É–ø–∫–∞.value)
        –ø—Ä–æ–¥–∞–∂–∞ = float(self.–ø—Ä–æ–¥–∞–∂–∞.value)
        –ø—Ä–∏–±—ã–ª—å = –ø—Ä–æ–¥–∞–∂–∞ - –ø–æ–∫—É–ø–∫–∞

        if –ø—Ä–∏–±—ã–ª—å >= 0:
            cursor.execute("INSERT INTO –¥–æ—Ö–æ–¥—ã (user_id, —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞) VALUES (%s, %s, %s, %s)",
                           (self.user_id, –ø—Ä–∏–±—ã–ª—å, f"üîÑ –ü–µ—Ä–µ–∫—É–ø: {self.—Ç–æ–≤–∞—Ä.value}", –¥–∞—Ç–∞))
            —Å–æ–æ–±—â–µ–Ω–∏–µ = f"üí∞ –°–¥–µ–ª–∫–∞ —É—á—Ç–µ–Ω–∞! –ü—Ä–∏–±—ã–ª—å: {–ø—Ä–∏–±—ã–ª—å}‚ÇΩ"
        else:
            cursor.execute("INSERT INTO —Ä–∞—Å—Ö–æ–¥—ã (user_id, —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞) VALUES (%s, %s, %s, %s)",
                           (self.user_id, abs(–ø—Ä–∏–±—ã–ª—å), f"üîÑ –£–±—ã—Ç–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∫—É–ø–µ: {self.—Ç–æ–≤–∞—Ä.value}", –¥–∞—Ç–∞))
            —Å–æ–æ–±—â–µ–Ω–∏–µ = f"üìâ –°–¥–µ–ª–∫–∞ –≤ —É–±—ã—Ç–æ–∫! –ü–æ—Ç–µ—Ä–∏: {abs(–ø—Ä–∏–±—ã–ª—å)}‚ÇΩ"

        conn.commit()
        await interaction.response.send_message(—Å–æ–æ–±—â–µ–Ω–∏–µ, ephemeral=True)
        
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
class –ü—Ä–æ—Å—Ç–æ–µ–ú–µ–Ω—é(View):
    def __init__(self, user_id):
        super().__init__(timeout=None)
        self.user_id = str(user_id)
        self.add_item(Button(label="üíµ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", style=discord.ButtonStyle.success, custom_id="add_income"))
        self.add_item(Button(label="üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", style=discord.ButtonStyle.danger, custom_id="add_expense"))
        self.add_item(Button(label="üöó –£—á–µ—Å—Ç—å –∞—Ä–µ–Ω–¥—É", style=discord.ButtonStyle.primary, custom_id="add_rent"))
        self.add_item(Button(label="üìä –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å", style=discord.ButtonStyle.secondary, custom_id="show_balance"))
        self.add_item(Button(label="üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", style=discord.ButtonStyle.secondary, custom_id="set_start"))
        self.add_item(Button(label="‚ûï –ö—É–ø–ª–µ–Ω–æ", style=discord.ButtonStyle.primary, custom_id="resell_pending"))
        self.add_item(Button(label="‚úÖ –ü—Ä–æ–¥–∞—Ç—å", style=discord.ButtonStyle.success, custom_id="resell_complete"))
        self.add_item(Button(label="üìã –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", style=discord.ButtonStyle.secondary, custom_id="resell_list"))
        self.add_item(Button(label="üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", style=discord.ButtonStyle.secondary, custom_id="history"))
        self.add_item(Button(label="üîÑ –ü–µ—Ä–µ–∫—É–ø", style=discord.ButtonStyle.primary, custom_id="resell"))
        self.add_item(Button(label="üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", style=discord.ButtonStyle.danger, custom_id="clear_all"))

@bot.command(name="–º–µ–Ω—é")
async def –º–µ–Ω—é(ctx):
    embed = discord.Embed(
        title="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤",
        description="–¢–µ–ø–µ—Ä—å –Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–º–Ω–∏—Ç—å –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö ‚Äî –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–∞–º.",
        color=discord.Color.purple()
    )
    embed.set_image(url="https://i.imgur.com/jOmamcY.png")
    await ctx.send(embed=embed, view=–ü—Ä–æ—Å—Ç–æ–µ–ú–µ–Ω—é(ctx.author.id))

@bot.event
async def on_interaction(interaction):
    user_id = str(interaction.user.id)

    if not interaction.data or "custom_id" not in interaction.data:
        return

    custom_id = interaction.data["custom_id"]

    if custom_id == "add_income":
        await interaction.response.send_modal(–î–æ—Ö–æ–¥Modal(user_id))

    elif custom_id == "add_expense":
        await interaction.response.send_modal(–†–∞—Å—Ö–æ–¥Modal(user_id))

    elif custom_id == "set_balance":
        await interaction.response.send_modal(–ë–∞–ª–∞–Ω—ÅModal(user_id))

    elif custom_id == "add_rent":
        await interaction.response.send_modal(–ê—Ä–µ–Ω–¥–∞Modal(user_id))

    elif custom_id == "show_balance":
        view = –ë–∞–ª–∞–Ω—ÅView(user_id)
        await view.–ø–æ–∫–∞–∑–∞—Ç—å_–±–∞–ª–∞–Ω—Å(interaction, None)

    elif custom_id == "show_history":
        await –ø–æ–∫–∞–∑–∞—Ç—å_–∏—Å—Ç–æ—Ä–∏—é(interaction, user_id)

    elif custom_id == "clear_income":
        await –æ—á–∏—Å—Ç–∏—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é(interaction, user_id, "–¥–æ—Ö–æ–¥—ã")

    elif custom_id == "clear_expense":
        await –æ—á–∏—Å—Ç–∏—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é(interaction, user_id, "—Ä–∞—Å—Ö–æ–¥—ã")

    elif custom_id == "clear_rental":
        await –æ—á–∏—Å—Ç–∏—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é(interaction, user_id, "–∞—Ä–µ–Ω–¥–∞")

    elif custom_id == "clear_all":
        await –æ—á–∏—Å—Ç–∏—Ç—å_–≤—Å–µ(interaction, user_id)

    elif custom_id == "resell":
        await interaction.response.send_modal(–ü–µ—Ä–µ–∫—É–øModal(user_id))
        
    elif custom_id == "resell_pending":
        await interaction.response.send_modal(–ü–æ–∫—É–ø–∫–∞Modal(user_id))
        
    elif custom_id == "clear_all":
        cursor.execute("DELETE FROM –¥–æ—Ö–æ–¥—ã WHERE user_id = %s", (user_id,))
        cursor.execute("DELETE FROM —Ä–∞—Å—Ö–æ–¥—ã WHERE user_id = %s", (user_id,))
        cursor.execute("DELETE FROM –∞—Ä–µ–Ω–¥–∞ WHERE user_id = %s", (user_id,))
        cursor.execute("DELETE FROM –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ_—Å–¥–µ–ª–∫–∏ WHERE user_id = %s", (user_id,))
        conn.commit()
        await interaction.response.send_message("üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.", ephemeral=True)
    
    elif custom_id == "history":
        history_text = ""

        cursor.execute("SELECT —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞ FROM –¥–æ—Ö–æ–¥—ã WHERE user_id = %s ORDER BY –¥–∞—Ç–∞ DESC LIMIT 5", (user_id,))
        –¥–æ—Ö–æ–¥—ã = cursor.fetchall()
        if –¥–æ—Ö–æ–¥—ã:
            history_text += "**üìà –î–æ—Ö–æ–¥—ã:**\n"
            for —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞ in –¥–æ—Ö–æ–¥—ã:
                history_text += f"‚ûï {—Å—É–º–º–∞}‚ÇΩ ‚Äî {–æ–ø–∏—Å–∞–Ω–∏–µ} ({–¥–∞—Ç–∞})\n"
        else:
            history_text += "üìà –î–æ—Ö–æ–¥—ã: –Ω–∏—á–µ–≥–æ –Ω–µ—Ç\n"

        cursor.execute("SELECT —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞ FROM —Ä–∞—Å—Ö–æ–¥—ã WHERE user_id = %s ORDER BY –¥–∞—Ç–∞ DESC LIMIT 5", (user_id,))
        —Ä–∞—Å—Ö–æ–¥—ã = cursor.fetchall()
        if —Ä–∞—Å—Ö–æ–¥—ã:
            history_text += "\n**üìâ –†–∞—Å—Ö–æ–¥—ã:**\n"
            for —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞ in —Ä–∞—Å—Ö–æ–¥—ã:
                history_text += f"‚ûñ {—Å—É–º–º–∞}‚ÇΩ ‚Äî {–æ–ø–∏—Å–∞–Ω–∏–µ} ({–¥–∞—Ç–∞})\n"
        else:
            history_text += "\nüìâ –†–∞—Å—Ö–æ–¥—ã: –Ω–∏—á–µ–≥–æ –Ω–µ—Ç\n"

        await interaction.response.send_message(history_text, ephemeral=True)
    
    elif custom_id == "resell_complete":
        cursor.execute("SELECT id, —Ç–æ–≤–∞—Ä, —Ü–µ–Ω–∞_–ø–æ–∫—É–ø–∫–∏ FROM –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ_—Å–¥–µ–ª–∫–∏ WHERE user_id = %s", (user_id,))
        —Å–¥–µ–ª–∫–∏ = cursor.fetchall()

        if not —Å–¥–µ–ª–∫–∏:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.", ephemeral=True)
            return

        if len(—Å–¥–µ–ª–∫–∏) == 1:
            id_, —Ç–æ–≤–∞—Ä, –ø–æ–∫—É–ø–∫–∞ = —Å–¥–µ–ª–∫–∏[0]
            await interaction.response.send_modal(–ó–∞–≤–µ—Ä—à–∏—Ç—å–°–¥–µ–ª–∫—ÉModal(user_id, id_, —Ç–æ–≤–∞—Ä, –ø–æ–∫—É–ø–∫–∞))
        else:
            view = View()
            for id_, —Ç–æ–≤–∞—Ä, –ø–æ–∫—É–ø–∫–∞ in —Å–¥–µ–ª–∫–∏:
                button = Button(
                    label=f"{—Ç–æ–≤–∞—Ä} ({–ø–æ–∫—É–ø–∫–∞}‚ÇΩ)",
                    style=discord.ButtonStyle.secondary,
                    custom_id=f"sell_{id_}"
                )

                async def callback(inter, id_=id_, —Ç–æ–≤–∞—Ä=—Ç–æ–≤–∞—Ä, –ø–æ–∫—É–ø–∫–∞=–ø–æ–∫—É–ø–∫–∞):
                    await inter.response.send_modal(–ó–∞–≤–µ—Ä—à–∏—Ç—å–°–¥–µ–ª–∫—ÉModal(user_id, id_, —Ç–æ–≤–∞—Ä, –ø–æ–∫—É–ø–∫–∞))

                button.callback = callback
                view.add_item(button)

            await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:", view=view, ephemeral=True)

    elif custom_id == "resell_list":
        cursor.execute("SELECT —Ç–æ–≤–∞—Ä, —Ü–µ–Ω–∞_–ø–æ–∫—É–ø–∫–∏, –¥–∞—Ç–∞ FROM –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ_—Å–¥–µ–ª–∫–∏ WHERE user_id = %s", (user_id,))
        –∑–∞–ø–∏—Å–∏ = cursor.fetchall()

        if not –∑–∞–ø–∏—Å–∏:
            await interaction.response.send_message("üîç –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.", ephemeral=True)
        else:
            lines = [f"üîπ {—Ç–æ–≤–∞—Ä} ‚Äî {—Ü–µ–Ω–∞}‚ÇΩ (üìÖ {–¥–∞—Ç–∞})" for —Ç–æ–≤–∞—Ä, —Ü–µ–Ω–∞, –¥–∞—Ç–∞ in –∑–∞–ø–∏—Å–∏]
            —Ç–µ–∫—Å—Ç = "\n".join(lines)
            await interaction.response.send_message(f"üìã **–í–∞—à–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:**\n{—Ç–µ–∫—Å—Ç}", ephemeral=True)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    keep_alive()  # Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
    bot.run(os.getenv("DISCORD_TOKEN"))
